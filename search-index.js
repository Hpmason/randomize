var searchIndex = JSON.parse('{\
"randomize":{"doc":"Pseudo-randomized number generator crate.","i":[[0,"games","randomize","Types for rolling dice.",null,null],[3,"StandardDie","randomize::games","Stores data for a standard 1 through <code>N</code> sided die.",null,null],[17,"D4","","A 4-sided die.",null,null],[17,"D6","","A 6-sided die.",null,null],[17,"D8","","An 8-sided die.",null,null],[17,"D10","","A 10-sided die.",null,null],[17,"D12","","A 12-sided die.",null,null],[17,"D20","","A 20-sided die.",null,null],[3,"ExplodingDie","","Stores data for an “exploding” 1 through <code>N</code> sided die.",null,null],[17,"X4","","A 4-sided exploding die.",null,null],[17,"X6","","A 6-sided exploding die.",null,null],[17,"X8","","An 8-sided exploding die.",null,null],[17,"X10","","A 10-sided exploding die.",null,null],[17,"X12","","A 12-sided exploding die.",null,null],[17,"X20","","A 20-sided exploding die.",null,null],[5,"dice","","Performs an <code>XdY</code> style dice roll, such as <code>3d6</code>.",null,[[["i32",15]],["i32",15]]],[5,"step_ed4","","Performs an Earthdawn 4e “step” roll.",null,[[["i32",15]],["i32",15]]],[5,"after_sundown","","Rolls an After Sundown style dice pool.",null,[[["i32",15]],["i32",15]]],[5,"rn_bounded_luck","","Returns a value in <code>0..x</code> with the odds modified by <code>luck</code>.",null,[[["i32",15]],["i32",15]]],[5,"rn_exponential_decay","","Returns a value of 1 or more.",null,[[["i32",15]],["i32",15]]],[5,"rn_z","","Returns a… value.",null,[[["i32",15]],["i32",15]]],[5,"fill_byte_buffer_from_os_random","randomize","Fills a byte buffer with random bytes from an OS-specific …",null,[[],[["u32",15],["result",4]]]],[8,"Gen32","","A Generator with 32 bits of output per step.",null,null],[10,"next_u32","","Generates the next 32 bits of output.",0,[[],["u32",15]]],[11,"next_bool","","Produce a <code>bool</code>",0,[[],["bool",15]]],[11,"next_u8","","Produce a <code>u8</code>",0,[[],["u8",15]]],[11,"next_u16","","Produce a <code>u16</code>",0,[[],["u16",15]]],[11,"next_u64","","Produce a <code>u64</code>",0,[[],["u64",15]]],[11,"next_f32_unit","","Returns an <code>f32</code> in the unsigned unit range, <code>[0, 1]</code>",0,[[],["f32",15]]],[11,"next_f32_signed_unit","","Returns an <code>f32</code> in the signed unit range, <code>[-1, 1]</code>",0,[[],["f32",15]]],[11,"next_f64_unit","","Returns an <code>f64</code> in the unsigned unit range, <code>[0, 1]</code>",0,[[],["f64",15]]],[11,"next_f64_signed_unit","","Returns an <code>f64</code> in the signed unit range, <code>[-1, 1]</code>",0,[[],["f64",15]]],[11,"next_bounded","","Gives a value within <code>0 .. B</code>",0,[[["u32",15]],["u32",15]]],[11,"pick","","Gets a value out of the slice given (by copy).",0,[[]]],[11,"pick_ref","","Gets a value out of the slice given (by shared ref).",0,[[]]],[11,"pick_mut","","Gets a value out of the slice given (by unique ref).",0,[[]]],[11,"shuffle","","Shuffles a slice in <code>O(len)</code> time.",0,[[]]],[3,"Pcg32","","A permuted congruential generator with 32 bits of output …",null,null],[3,"BoundedRandU32","","Stores the values to sample a number in <code>0 .. N</code>",null,null],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"borrow","randomize::games","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"next_u32","randomize","",1,[[],["u32",15]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","randomize::games","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"eq","randomize","",1,[[["pcg32",3]],["bool",15]]],[11,"ne","","",1,[[["pcg32",3]],["bool",15]]],[11,"eq","","",2,[[["boundedrandu32",3]],["bool",15]]],[11,"ne","","",2,[[["boundedrandu32",3]],["bool",15]]],[11,"eq","randomize::games","",3,[[["standarddie",3]],["bool",15]]],[11,"ne","","",3,[[["standarddie",3]],["bool",15]]],[11,"eq","","",4,[[["explodingdie",3]],["bool",15]]],[11,"ne","","",4,[[["explodingdie",3]],["bool",15]]],[11,"hash","randomize","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","randomize::games","",3,[[]]],[11,"hash","","",4,[[]]],[11,"from","randomize","",1,[[]]],[11,"clone","","",1,[[],["pcg32",3]]],[11,"clone","","",2,[[],["boundedrandu32",3]]],[11,"clone","randomize::games","",3,[[],["standarddie",3]]],[11,"clone","","",4,[[],["explodingdie",3]]],[11,"default","randomize","",1,[[]]],[11,"next_bool","","Produce a <code>bool</code>",0,[[],["bool",15]]],[11,"next_u8","","Produce a <code>u8</code>",0,[[],["u8",15]]],[11,"next_u16","","Produce a <code>u16</code>",0,[[],["u16",15]]],[11,"next_u64","","Produce a <code>u64</code>",0,[[],["u64",15]]],[11,"next_f32_unit","","Returns an <code>f32</code> in the unsigned unit range, <code>[0, 1]</code>",0,[[],["f32",15]]],[11,"next_f32_signed_unit","","Returns an <code>f32</code> in the signed unit range, <code>[-1, 1]</code>",0,[[],["f32",15]]],[11,"next_f64_unit","","Returns an <code>f64</code> in the unsigned unit range, <code>[0, 1]</code>",0,[[],["f64",15]]],[11,"next_f64_signed_unit","","Returns an <code>f64</code> in the signed unit range, <code>[-1, 1]</code>",0,[[],["f64",15]]],[11,"next_bounded","","Gives a value within <code>0 .. B</code>",0,[[["u32",15]],["u32",15]]],[11,"pick","","Gets a value out of the slice given (by copy).",0,[[]]],[11,"pick_ref","","Gets a value out of the slice given (by shared ref).",0,[[]]],[11,"pick_mut","","Gets a value out of the slice given (by unique ref).",0,[[]]],[11,"shuffle","","Shuffles a slice in <code>O(len)</code> time.",0,[[]]],[11,"seed","","Seed a new generator.",1,[[["u64",15]]]],[11,"seed_from_os","","Seeds a new generator from the OS’s randomness.",1,[[]]],[11,"next_u32","","Gets the next 32-bits of output.",1,[[],["u32",15]]],[11,"jump","","Jumps the generator by <code>delta</code> steps forward.",1,[[["u64",15]]]],[11,"new","","Constructs a new <code>BoundedRandU32</code>.",2,[[["u32",15]]]],[11,"try_new","","Constructs a new <code>BoundedRandU32</code>, or <code>None</code> on failure.",2,[[["u32",15]],["option",4]]],[11,"count","","The number of possible outputs.",2,[[],["u32",15]]],[11,"place_in_range","","Given a <code>u32</code>, place it into this bounded range.",2,[[["u32",15]],[["u32",15],["option",4]]]],[11,"sample","","Given a gen, sample from the gen until <code>place_in_range</code> …",2,[[],["u32",15]]],[11,"new","randomize::games","Constructs a new die.",3,[[["u32",15]]]],[11,"sides","","The number of sides of this die.",3,[[],["i32",15]]],[11,"sample","","Sample from the generator to get a die roll.",3,[[],["i32",15]]],[11,"new","","Constructs an exploding die.",4,[[["u32",15]]]],[11,"sides","","The number of sides of this die.",4,[[],["i32",15]]],[11,"sample","","Sample from the generator to perform an exploding roll.",4,[[],["i32",15]]]],"p":[[8,"Gen32"],[3,"Pcg32"],[3,"BoundedRandU32"],[3,"StandardDie"],[3,"ExplodingDie"]]}\
}');
initSearch(searchIndex);