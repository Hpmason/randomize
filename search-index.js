var searchIndex = JSON.parse('{\
"randomize":{"doc":"Pseudo-randomized number generator crate.","t":[0,3,17,17,17,17,17,17,3,17,17,17,17,17,17,5,5,5,5,5,5,5,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["games","StandardDie","D4","D6","D8","D10","D12","D20","ExplodingDie","X4","X6","X8","X10","X12","X20","dice","step_ed4","after_sundown","rn_bounded_luck","rn_exponential_decay","rn_z","fill_byte_buffer_from_os_random","Gen32","next_u32","next_bool","next_u8","next_u16","next_u64","next_f32_unit","next_f32_signed_unit","next_f64_unit","next_f64_signed_unit","next_bounded","pick","pick_ref","pick_mut","shuffle","Pcg32","BoundedRandU32","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","next_u32","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","hash","hash","hash","hash","from","clone","clone","clone","clone","default","next_bool","next_u8","next_u16","next_u64","next_f32_unit","next_f32_signed_unit","next_f64_unit","next_f64_signed_unit","next_bounded","pick","pick_ref","pick_mut","shuffle","seed","seed_from_os","next_u32","jump","new","try_new","count","place_in_range","sample","new","sides","sample","new","sides","sample"],"q":["randomize","randomize::games","","","","","","","","","","","","","","","","","","","","randomize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","randomize::games","","","","","","","","","","","","","","randomize","","","randomize::games","","randomize","","","","randomize::games","","","","randomize","","randomize::games","","randomize","","","randomize::games","","randomize","","","","","","","","","","","","","","","","","","","","","","","randomize::games","","","","",""],"d":["Types for rolling dice.","Stores data for a standard 1 through <code>N</code> sided die.","A 4-sided die.","A 6-sided die.","An 8-sided die.","A 10-sided die.","A 12-sided die.","A 20-sided die.","Stores data for an “exploding” 1 through <code>N</code> sided die.","A 4-sided exploding die.","A 6-sided exploding die.","An 8-sided exploding die.","A 10-sided exploding die.","A 12-sided exploding die.","A 20-sided exploding die.","Performs an <code>XdY</code> style dice roll, such as <code>3d6</code>.","Performs an Earthdawn 4e “step” roll.","Rolls an After Sundown style dice pool.","Returns a value in <code>0..x</code> with the odds modified by <code>luck</code>.","Returns a value of 1 or more.","Returns a… value.","Fills a byte buffer with random bytes from an OS-specific …","A Generator with 32 bits of output per step.","Generates the next 32 bits of output.","Produce a <code>bool</code>","Produce a <code>u8</code>","Produce a <code>u16</code>","Produce a <code>u64</code>","Returns an <code>f32</code> in the unsigned unit range, <code>[0, 1]</code>","Returns an <code>f32</code> in the signed unit range, <code>[-1, 1]</code>","Returns an <code>f64</code> in the unsigned unit range, <code>[0, 1]</code>","Returns an <code>f64</code> in the signed unit range, <code>[-1, 1]</code>","Gives a value within <code>0 .. B</code>","Gets a value out of the slice given (by copy).","Gets a value out of the slice given (by shared ref).","Gets a value out of the slice given (by unique ref).","Shuffles a slice in <code>O(len)</code> time.","A permuted congruential generator with 32 bits of output …","Stores the values to sample a number in <code>0 .. N</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produce a <code>bool</code>","Produce a <code>u8</code>","Produce a <code>u16</code>","Produce a <code>u64</code>","Returns an <code>f32</code> in the unsigned unit range, <code>[0, 1]</code>","Returns an <code>f32</code> in the signed unit range, <code>[-1, 1]</code>","Returns an <code>f64</code> in the unsigned unit range, <code>[0, 1]</code>","Returns an <code>f64</code> in the signed unit range, <code>[-1, 1]</code>","Gives a value within <code>0 .. B</code>","Gets a value out of the slice given (by copy).","Gets a value out of the slice given (by shared ref).","Gets a value out of the slice given (by unique ref).","Shuffles a slice in <code>O(len)</code> time.","Seed a new generator.","Seeds a new generator from the OS’s randomness.","Gets the next 32-bits of output.","Jumps the generator by <code>delta</code> steps forward.","Constructs a new <code>BoundedRandU32</code>.","Constructs a new <code>BoundedRandU32</code>, or <code>None</code> on failure.","The number of possible outputs.","Given a <code>u32</code>, place it into this bounded range.","Given a gen, sample from the gen until <code>place_in_range</code> …","Constructs a new die.","The number of sides of this die.","Sample from the generator to get a die roll.","Constructs an exploding die.","The number of sides of this die.","Sample from the generator to perform an exploding roll."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,2,2,3,4,5,2,2,3,3,4,4,5,5,2,3,4,5,2,2,3,4,5,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[],[["u32",15],["result",4]]],null,[[],["u32",15]],[[],["bool",15]],[[],["u8",15]],[[],["u16",15]],[[],["u64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["pcg32",3]],["bool",15]],[[["pcg32",3]],["bool",15]],[[["boundedrandu32",3]],["bool",15]],[[["boundedrandu32",3]],["bool",15]],[[["standarddie",3]],["bool",15]],[[["standarddie",3]],["bool",15]],[[["explodingdie",3]],["bool",15]],[[["explodingdie",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["pcg32",3]],[[],["boundedrandu32",3]],[[],["standarddie",3]],[[],["explodingdie",3]],[[]],[[],["bool",15]],[[],["u8",15]],[[],["u16",15]],[[],["u64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[["u32",15]],["u32",15]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[],["u32",15]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]],["option",4]],[[],["u32",15]],[[["u32",15]],[["option",4],["u32",15]]],[[],["u32",15]],[[["u32",15]]],[[],["i32",15]],[[],["i32",15]],[[["u32",15]]],[[],["i32",15]],[[],["i32",15]]],"p":[[8,"Gen32"],[3,"Pcg32"],[3,"BoundedRandU32"],[3,"StandardDie"],[3,"ExplodingDie"]]}\
}');
initSearch(searchIndex);